#include <rclcpp/rclcpp.hpp>
#include <std_msgs/msg/String.hpp>

class PublisherNode : public rclcpp::Node {
public:
    PublisherNode() : Node("publisher_node") {
        publisher_ = this->create_publisher<std_msgs::msg::String>("my_topic", 10);
        timer_ = this->create_wall_timer(std::chrono::seconds(1), std::bind(&PublisherNode::publishMessage, this));
    }

private:
    void publishMessage() {
        auto msg = std::make_unique<std_msgs::msg::String>();
        msg->data = "Message: " + std::to_string(message_counter_);
        RCLCPP_INFO(this->get_logger(), "Publishing: %s", msg->data.c_str());
        publisher_->publish(std::move(msg));
        ++message_counter_;
    }

    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr publisher_;
    rclcpp::TimerBase::SharedPtr timer_;
    int message_counter_ = 1;
};

int main(int argc, char **argv) {
    rclcpp::init(argc, argv);
    auto node = std::make_shared<PublisherNode>();
    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}
